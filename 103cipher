#!/usr/bin/env python3
##
## EPITECH PROJECT, 2023
## 103 architect
## File description:
## 103 cypher
##
import sys
from math import *

def print_h():
    print("USAGE\n    ./103cipher message key flag\n\nDESCRIPTION\n    message     a message, made of ASCII characters\n    key         the encryption key, made of ASCII characters\n    flag        0 for the message to be encrypted, 1 to be decrypted")
    return 0

def print_message(matrice):
    for i in range(len(matrice)):
        for j in range(len(matrice[0])):
            print(matrice[i][j], end=" ")
    print("")

def multiply_matrices(matrice1, matrice2):
    resultat = [[0 for _ in range(len(matrice2[0]))] for _ in range(len(matrice1))]
    for i in range(len(matrice1)):
        for j in range(len(matrice2[0])):
            for k in range(len(matrice2)):
                resultat[i][j] += matrice1[i][k] * matrice2[k][j]
    return resultat

def print_matrice(matrice):
    for i in range(len(matrice)):
        for j in range(len(matrice[0])):
            print("{:<7d}".format(matrice[i][j]), end='')
        print("")
    print("")

def set_matrice(hash):
    long = len(hash)
    size = ceil(sqrt(long))
    matrice = []
    k = 0
    for i in range(size):
        tab = []
        for j in range(size):
            if k < long:
                tab.append(ord(hash[k]))
                k += 1
            else:
                tab.append(0)
        matrice.append(tab)
    return matrice

def get_message_line(long, message):
    line = []

    for i in range(long):
        line.append(0)
    for i in range(long):
        if len(message) == 0:
            return line
        line[i] = ord(message.pop(0))
    return line

def get_matrice_message(long, message):
    matrice = []

    message_li = list(message)
    while(len(message_li) > 0):
        matrice.append(get_message_line(long, message_li))
    return matrice

def crypt_message(argv):
    matrice = set_matrice(argv[1])
    long = len(matrice)
    matrice_message = get_matrice_message(long, argv[0])
    encoded_matrice = multiply_matrices(matrice_message, matrice)
    print("Key matrix:")
    print_matrice(matrice)
    print("Encrypted message:")
    print_message(encoded_matrice)

def pipi_caca(matrice_clé):
    a = matrice_clé[0][0]
    b = matrice_clé[0][1]
    c = matrice_clé[0][2]
    d = matrice_clé[1][0]
    e = matrice_clé[1][1]
    f = matrice_clé[1][2]
    g = matrice_clé[2][0]
    h = matrice_clé[2][1]
    i = matrice_clé[2][2]
    det = a * (e*i - f*h)-b*(d*i-f*g)+c * (d*h-e*g)
    if det == 0:
        sys.exit(84)
    cofactor = [
        [e * i - f * h, -(d * i - f * g), d * h - e * g],
        [-(b * i - c * h), a * i - c * g, -(a * h - b * g)],
        [b * f - c * e, -(a * f - c * d), a * e - b * d]
    ]
    print("iciii", cofactor[0][0], det, cofactor[0][0] / det)
    print("iciii", cofactor[0][1], det, cofactor[0][1] / det)
    print("iciii", cofactor[0][2], det, cofactor[0][2] / det)
    inverse_matrix = [
        [cofactor[0][0] / det, cofactor[0][1] / det, cofactor[0][2] / det],
        [cofactor[1][0] / det, cofactor[1][1] / det, cofactor[1][2] / det],
        [cofactor[2][0] / det, cofactor[2][1] / det, cofactor[2][2] / det]
    ]

    print_matrice_float(inverse_matrix)
    return inverse_matrix

def inverse_matrice_2x2(matrice_clé, det):
    a = matrice_clé[1][1] / det
    b = (-1 * matrice_clé[0][1]) / det
    c = (-1 * matrice_clé[1][0]) / det
    d = matrice_clé[0][0] / det
    return [[a, b], [c, d]]

def inverse_matrice(matrice_clé):
    taille_mat = len(matrice_clé)
    if taille_mat == 1:
        if (matrice_clé[0][0] == 0):
            sys.exit(84);
        return [[1 / matrice_clé[0][0]]]
    if taille_mat == 2:
        det = (matrice_clé[0][0] * matrice_clé[1][1]) - (matrice_clé[0][1] * matrice_clé[1][0])
        if det == 0:
            sys.exit(84);
        return inverse_matrice_2x2(matrice_clé, det)
    if taille_mat == 3:
        return pipi_caca(matrice_clé)
    sys.exit(84)

def get_crypted_message_line(long, message):
    line = []

    for i in range(long):
        line.append(0)
    for i in range(long):
        if len(message) == 0:
            return line
        line[i] = int(message.pop(0))
    return line

def get_crypted_matrice_message(long, message):
    matrice = []
    message_li = message.split()
    while(len(message_li) > 0):
        matrice.append(get_crypted_message_line(long, message_li))
    return matrice

def decrypt_message(argv):
    matrice_clé = set_matrice(argv[1])
    print_matrice(matrice_clé)
    matrice_clé = inverse_matrice(matrice_clé)
    print_matrice_float(matrice_clé)
    long = len(matrice_clé)
    crypted_matrice = get_crypted_matrice_message(long, argv[0])
    decrypted_matrice = multiply_matrices(crypted_matrice, matrice_clé)
    message = ""
    for i in range(len(decrypted_matrice)):
        for j in range(len(decrypted_matrice[i])):
            message += chr(int(decrypted_matrice[i][j]))
    print(message)

def main(argv):
    if (argv[0] == "-h"):
        return print_h()
    if (argv[2] == "0"):
        return crypt_message(argv)
    if (argv[2] == "1"):
        return decrypt_message(argv)

if __name__ == "__main__":
    main(sys.argv[1:])
    sys.exit(0)